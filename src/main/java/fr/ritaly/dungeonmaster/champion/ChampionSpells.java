/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package fr.ritaly.dungeonmaster.champion;

import org.apache.commons.lang.Validate;

import fr.ritaly.dungeonmaster.ClockListener;
import fr.ritaly.dungeonmaster.Temporizer;
import fr.ritaly.dungeonmaster.event.ChangeEvent;
import fr.ritaly.dungeonmaster.event.ChangeEventSource;
import fr.ritaly.dungeonmaster.event.ChangeEventSupport;
import fr.ritaly.dungeonmaster.event.ChangeListener;
import fr.ritaly.dungeonmaster.stat.Stat;

/**
 * Handles the effects of spells acting on a champion.
 *
 * @author <a href="mailto:francois.ritaly@gmail.com">Francois RITALY</a>
 */
public class ChampionSpells implements ClockListener, ChangeEventSource {

	private final ChangeEventSupport eventSupport = new ChangeEventSupport();

	/**
	 * The champion affected by the spells.
	 */
	private final Champion champion;

	/**
	 * Temporizer used for managing active spells.
	 */
	private final Temporizer temporizer;

	/**
	 * The "light" stat corresponds to the amount of light generated by the
	 * champion.
	 */
	private final Stat light;

	// TODO private final Stat shield;

	public ChampionSpells(final Champion champion) {
		Validate.notNull(champion, "The given champion is null");

		this.champion = champion;
		this.light = new Stat(champion.getName(), "Light");
		// this.shield = new Stat(champion.getName(), "Shield");
		this.temporizer = new Temporizer(champion.getName() + ".Spells", 4);
	}

	public int getLightValue() {
		return light.value();
	}

	public Stat getLight() {
		return light;
	}

	@Override
	public boolean clockTicked() {
		if (temporizer.trigger()) {
			if (light.value() > 0) {
				if (light.dec(1) == 0) {
					// Notify the change
					fireChangeEvent();
				}
			}
//			if (shield.actualValue() > 0) {
//				if (shield.dec() == 0) {
//					// TODO Fire an event
//				}
//			}
		}

		// Always listen to clock ticks
		return true;
	}

//	public Stat getShield() {
//		return shield;
//	}

	@Override
	public void addChangeListener(ChangeListener listener) {
		eventSupport.addChangeListener(listener);
	}

	@Override
	public void removeChangeListener(ChangeListener listener) {
		eventSupport.removeChangeListener(listener);
	}

	private void fireChangeEvent() {
		eventSupport.fireChangeEvent(new ChangeEvent(this));
	}
}